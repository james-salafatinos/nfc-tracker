<script>
        // set the dimensions and margins of the graph
        var width = 960
            height = 600
            margin = 20

        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        var radius_day = Math.min(width, height) / 2 - margin

        // append the svg object to the div called 'my_dataviz'
        var svg_rescue_time_day = d3.select("#rescue_time_day")
        .append("svg")
            .attr("width", width)
            .attr("height", height)
        .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

     
        var title = d3.select('#rescue_time_day')
            .append('svg')
            .append('text')
            .text('Daily Phone + Computer Time Breakdown')
            .attr("y", 25)         
            .attr("x", 250)
            .attr('fill', 'black')
            .style("font-size", "26px")

        var nested_data_day = d3.nest()
        .key(function(d) { return d.Activity; })
        .rollup(function(cat) { return d3.sum(cat, function(d) {return d['Time Spent (seconds)']}); })
        .entries(data_rescue_day);

        
        //Getting the domain for colors (how many colors do you want)
        let cat_time_day = Object.values(nested_data_day)
        var cats_day = [];
        for(var o in cat_time_day) {
            cats_day.push(cat_time_day[o].key);
        }
        var color_day = d3.scaleOrdinal()
        .domain(cats_day)
        .range(d3.schemeCategory20);
        

        //################Get Top 15########################
        //Get the values
        const array_to_be_sorted_day = [];
        nested_data_day.forEach(obj => {
            array_to_be_sorted_day.push(obj.value);
        })
        //Sort them
        const sorted_times_day = array_to_be_sorted_day.sort((a,b)=>a-b)
        console.log(sorted_times_day)
        // Slice out the top 15
        browser_times_to_show_day = sorted_times_day.slice(sorted_times_day.length -15, sorted_times_day.length+1)

        //Add them to a map if they are in the top 15
        const converted_day = {};
        nested_data_day.forEach(obj => {
            if (browser_times_to_show_day.includes(obj.value)){
                converted_day[JSON.stringify(obj.key)] = obj.value;
            }
        })
        //#######################

        // Compute the position of each group on the pie:
        var pie_day = d3.pie()
        .sort(null) // Do not sort group by size
        .value(function(d) {return d.value})

        var data_ready_day = pie(d3.entries(converted_day))
        


        // The arc generator
        var arc_day = d3.arc()
        .innerRadius(radius_day * 0.5)         // This is the size of the donut hole
        .outerRadius(radius_day * 0.8)

        // Another arc that won't be drawn. Just for labels positioning
        var outerArc_day = d3.arc()
        .innerRadius(radius_day * 0.9)
        .outerRadius(radius_day * 0.9)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svg_rescue_time_day
        .selectAll('allSlices')
        .data(data_ready_day)
        .enter()
        .append('path')
        .attr('d', arc_day)
        .attr('fill', function(d){ return(color_day(d.data.key)) })
        .attr("stroke", "black")
        .style("stroke-width", "1px")
        .style("opacity", 0.95)

        // Add the polylines between chart and labels:
        svg_rescue_time_day
        .selectAll('allPolylines')
        .data(data_ready_day)
        .enter()
        .append('polyline')
            .attr("stroke", "black")
            .style("fill", "none")
            .attr("stroke-width", 1)
            .attr('points', function(d) {
            var posA_day = arc_day.centroid(d) // line insertion in the slice
            var posB_day = outerArc_day.centroid(d) // line break: we use the other arc generator that has been built only for that
            var posC_day = outerArc_day.centroid(d); // Label position = almost the same as posB
            var midangle_day = d.startAngle_day + (d.endAngle_day - d.startAngle_day) / 2 // we need the angle_day_day to see if the X position will be at the extreme right or extreme left
            posC_day[0] = radius_day * 0.95 * (midangle_day < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
            return [posA_day, posB_day, posC_day]
            })

        // Add the polylines between chart and labels:
        svg_rescue_time_day
        .selectAll('allLabels')
        .data(data_ready_day)
        .enter()
        .append('text')
        .attr("font-weight", function(d, i) {
                return 650
                })
            .text( function(d) {  return d.data.key.slice(1,d.data.key.length-1)} )
            .attr('transform', function(d) {
                var pos_day = outerArc_day.centroid(d);
                var midangle_day = d.startAngle_day + (d.endAngle_day - d.startAngle_day) / 2
                pos_day[0] = radius_day * 0.99 * (midangle_day < Math.PI ? 1 : -1);
                return 'translate(' + pos_day + ')';
            })
            .style('text-anchor', function(d) {
                var midangle_day = d.startAngle_day + (d.endAngle_day - d.startAngle_day) / 2
                return (midangle_day < Math.PI ? 'start' : 'end')
            })
         

    </script>