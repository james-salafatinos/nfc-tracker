<script>
        var origin = [475, 300], scale_habits = 20, j = 10, cubesData_habits = [], alpha_habit = 0, beta_habit = 0, startAngle_habit = Math.PI/6;
        var svg_habit    = d3.select('#habit').append('svg').call(d3.drag().on('drag', dragged).on('start', dragStart).on('end', dragEnd)).append('g');
        var color  = d3.scaleOrdinal(d3.schemeCategory20);
        var cubesGroup_habits = svg_habit.append('g').attr('class', 'cubes');
        var mx_habit, my_habit, mouseX_habit, mouseY_habit;
        
        var title = d3.select('#habit')
                .append('svg')
                .append('text')
                .text('Habit Checklist (out of 6 maximum) for the past month')
                .attr("y", 25)         
                .attr("x", 175)
                .attr('fill', 'black')
                .style("font-size", "26px")


        var cubes3D_habits = d3._3d()
            .shape('CUBE')
            .x(function(d){ return d.x; })
            .y(function(d){ return d.y; })
            .z(function(d){ return d.z; })
            .rotateY( startAngle_habit + Math.PI)
            .rotateX(-startAngle_habit)
            .origin(origin)
            .scale(scale_habits);
    
        function processData_habits(data, tt){
    
            /* --------- CUBES ---------*/
    
            var cubes = cubesGroup_habits.selectAll('g.cube').data(data, function(d){ return d.id });
    
            var ce = cubes
                .enter()
                .append('g')
                .attr('class', 'cube')
                .attr('fill', function(d){ return color(d.id); })
                .attr('stroke', function(d){ return d3.color(color(d.id)).darker(2); })
                .merge(cubes)
                .sort(cubes3D_habits.sort);
    
            cubes.exit().remove();
    
            /* --------- FACES ---------*/
    
            var faces = cubes.merge(ce).selectAll('path.face').data(function(d){ return d.faces; }, function(d){ return d.face; });
    
            faces.enter()
                .append('path')
                .attr('class', 'face')
                .attr('fill-opacity', 0.95)
                .classed('_3d', true)
                .merge(faces)
                .transition().duration(tt)
                .attr('d', cubes3D_habits.draw);
    
            faces.exit().remove();
    
            /* --------- TEXT ---------*/
    
            var texts = cubes.merge(ce).selectAll('text.text').data(function(d){
                var _t = d.faces.filter(function(d){
                    
                    return d.face === 'top';
                });
                return [{height: d.height, centroid: _t[0].centroid, day: d.day}];
            });
    
    
            function getDayOfWeek(date) {
            const dayOfWeek = new Date(date).getDay();    
            return isNaN(dayOfWeek) ? null : 
                ['Su', 'M', 'T', 'W', 'Th', 'F', 'Sa'][dayOfWeek];
            }
            
    
            texts
                .enter()
                .append('text')
                .attr('class', 'text')
                .attr('dy', '-.7em')
                .attr('text-anchor', 'middle')
                .attr('font-family', 'sans-serif')
                .attr('font-weight', 'bolder')
                .attr('x', function(d){ return origin[0] + scale_habits * d.centroid.x })
                .attr('y', function(d){ return origin[1] + scale_habits * d.centroid.y })
                .classed('_3d', true)
                .merge(texts)
                .transition().duration(tt)
                .attr('fill', 'black')
                .attr('stroke', 'none')
                .attr('x', function(d){ return origin[0] + scale_habits * d.centroid.x })
                .attr('y', function(d){ return origin[1] + scale_habits * d.centroid.y })
                .tween('text', function(d){
                    var that = d3.select(this);
    
                    //console.log(that.text().slice(that.text().length-3,that.text().length))
                    //interpolated after a slice of the String because the text is passed including the date...
                    var i = d3.interpolateNumber(+(that.text().slice(that.text().length-3,that.text().length)), Math.abs(d.height));
                    var v = () => getDayOfWeek(d.day)//d.day//d3.interpolateString(d.day, Math.abs(d.height));
    
                    return function(t){
                        that.text(v(t) + ' | ' + i(t).toFixed(1));
    
                    };
                });
    
            texts.exit().remove();
    
            /* --------- SORT TEXT & FACES ---------*/
    
            ce.selectAll('._3d').sort(d3._3d().sort);
    
        }
    
    
    
    
    
    
        function init(){
            cubesData_habits = [];
            let _z = []
            let _j = []
            let _x = []
            let _h = []
            var cnt = 0;
    
            //Group By the Date!
            var nested_data_habits = d3.nest()
                .key(function(d) { return d.CalendarDate; }) //cat
                .rollup(function(cat) { return d3.sum(cat, function(d) {return d['Value']}); })
                .entries(data_habits);
            console.log('habits nested data', nested_data_habits)
    
            for(var z = -j; z <= j; z = z + 6){
                for(var x = -j; x <= j; x = x + 3){
                    //console.log('error h call', nested_data_habits)
                    // console.log('error h call', nested_data_habits[cnt])
                    // console.log('error h call', nested_data_habits[cnt].value)

                    
                    function isUndefined(value){
                            // Obtain `undefined` value that's
                            // guaranteed to not have been re-assigned
                            var undefined = void(0);
                            return value === undefined;
                        }

                    if (isUndefined(nested_data_habits[cnt])){

                    } else{
                        h = -1*nested_data_habits[cnt].value
                    }
                    
                    if (isUndefined(nested_data_habits[cnt])){
                    } else{
                        var _cube = makeCube(h, x, z);

                        _cube.height = h;
                        _cube.day = nested_data_habits[cnt].key
                        _cube.id = 'cube_' + cnt++;
                       // console.log(_cube.day)
                    }
                   
        
                        _z.push(z)
                        _j.push(j)
                        _x.push(x)
                        _h.push(h)
        
                        cubesData_habits.push(_cube);
                    }
            }
            processData_habits(cubes3D_habits(cubesData_habits), 1000);
        }
    
        function dragStart(){
            mx_habit = d3.event.x;
            my_habit = d3.event.y;
            console.log('habits',mx,my)
        }
    
        function dragged(){
            mouseX_habit = mouseX_habit || 0;
            mouseY_habit = mouseY_habit || 0;
            beta_habit   = (d3.event.x - mx_habit + mouseX_habit) * Math.PI / 230 ;
            alpha_habit  = (d3.event.y - my_habit + mouseY_habit) * Math.PI / 230  * (-1);
            processData_habits(cubes3D_habits.rotateY(beta_habit + startAngle_habit + Math.PI ).rotateX(alpha_habit - startAngle_habit)(cubesData_habits), 0);
        }
    
        function dragEnd(){
            mouseX_habit = d3.event.x - mx_habit + mouseX_habit;
            mouseY_habit = d3.event.y - my_habit + mouseY_habit;
        }
    
        function makeCube(h, x, z){
            return [
                {x: x - 1, y: h, z: z + 1}, // FRONT TOP LEFT
                {x: x - 1, y: 0, z: z + 1}, // FRONT BOTTOM LEFT
    
                {x: x + 1, y: 0, z: z + 1}, // FRONT BOTTOM RIGHT
                {x: x + 1, y: h, z: z + 1}, // FRONT TOP RIGHT
                {x: x - 1, y: h, z: z - 1}, // BACK  TOP LEFT
                {x: x - 1, y: 0, z: z - 1}, // BACK  BOTTOM LEFT
                {x: x + 1, y: 0, z: z - 1}, // BACK  BOTTOM RIGHT
                {x: x + 1, y: h, z: z - 1}, // BACK  TOP RIGHT
            ];
        }
    
        d3.selectAll('button').on('click', init);
    
        init();
    </script> 